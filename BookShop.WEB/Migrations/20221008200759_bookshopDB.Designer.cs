// <auto-generated />
using System;
using BookShop.WEB.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookShop.WEB.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20221008200759_bookshopDB")]
    partial class bookshopDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Binding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameBinding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Binding");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameBinding = "Твёрдый переплёт"
                        },
                        new
                        {
                            Id = 2,
                            NameBinding = "Мягкий переплёт"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeLimit")
                        .HasColumnType("int");

                    b.Property<int>("Bindingid")
                        .HasColumnType("int");

                    b.Property<string>("BookDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAddSite")
                        .HasColumnType("datetime2");

                    b.Property<int>("Formatid")
                        .HasColumnType("int");

                    b.Property<int>("Ganresid")
                        .HasColumnType("int");

                    b.Property<int>("Importerid")
                        .HasColumnType("int");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPages")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Publisherid")
                        .HasColumnType("int");

                    b.Property<int>("TheAuthorsid")
                        .HasColumnType("int");

                    b.Property<string>("TitleNameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearPublishing")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Bindingid");

                    b.HasIndex("Formatid");

                    b.HasIndex("Ganresid");

                    b.HasIndex("Importerid");

                    b.HasIndex("Publisherid");

                    b.HasIndex("TheAuthorsid");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeLimit = 12,
                            Bindingid = 1,
                            BookDescription = "Тут будет описание книги",
                            BookWeight = 456,
                            DateAddSite = new DateTime(2022, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Formatid = 1,
                            Ganresid = 1,
                            Importerid = 1,
                            NameBook = "Книга 1",
                            NumberPages = 134,
                            Price = 12,
                            Publisherid = 1,
                            TheAuthorsid = 1,
                            TitleNameImage = "Book1.jpg",
                            YearPublishing = new DateTime(2022, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdressDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataDlivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Delivery");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressDelivery = "г.Минск, ул.Лиловая 43, кв 32",
                            DataDlivery = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameBook = "Book1",
                            PhoneUser = "+375(29)454-45-55",
                            Price = 12,
                            UserId = "393"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Format");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameFormat = "Сверхкрупный — (84×108/8; 70×90/8)"
                        },
                        new
                        {
                            Id = 2,
                            NameFormat = "Крупный — (70×90/16; 75×90/16)"
                        },
                        new
                        {
                            Id = 3,
                            NameFormat = "Средний — (60×90/16; 84×108/32)"
                        },
                        new
                        {
                            Id = 4,
                            NameFormat = "Малый — (70×90/32; 70×108/32)"
                        },
                        new
                        {
                            Id = 5,
                            NameFormat = "Сверхмалый — (60×90/32)"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Ganres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameGanre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ganres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameGanre = "Детектив"
                        },
                        new
                        {
                            Id = 2,
                            NameGanre = "Фантастика"
                        },
                        new
                        {
                            Id = 3,
                            NameGanre = "Приключения"
                        },
                        new
                        {
                            Id = 4,
                            NameGanre = "Роман"
                        },
                        new
                        {
                            Id = 5,
                            NameGanre = "Научная книга"
                        },
                        new
                        {
                            Id = 6,
                            NameGanre = "Фольклор"
                        },
                        new
                        {
                            Id = 7,
                            NameGanre = "Юмор"
                        },
                        new
                        {
                            Id = 8,
                            NameGanre = "Поэзия, проза"
                        },
                        new
                        {
                            Id = 9,
                            NameGanre = "Детская книга"
                        },
                        new
                        {
                            Id = 10,
                            NameGanre = "Документальная литература"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Importer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressImpoter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameImporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postcode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Importer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressImpoter = "РБ, г.Минск, ул. Скрыганова 14, каб. 36 ",
                            FullNameImporter = "ООО <<Приносим радость>>",
                            postcode = 220073
                        },
                        new
                        {
                            Id = 2,
                            AddressImpoter = "РБ, г.Минск ул. Кульман 1/3-42",
                            FullNameImporter = "ООО <<Харвест>>",
                            postcode = 220013
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.OurStores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdressStore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OurStores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressStore = "Г.Минск, Ул. Ландыши 1"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Pickup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIssueOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OurStoresid")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OurStoresid");

                    b.HasIndex("UserId");

                    b.ToTable("Pickup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateIssueOrder = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameBook = "Book1",
                            OurStoresid = 1,
                            Price = 12,
                            UserId = "393"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressPublisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNamePublisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortNamePublisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressPublisher = "РФ, г.Москва, ул. Клары Цеткин 18,корп.5",
                            FullNamePublisher = "ООО <<Издательство Эксмо>>",
                            ShortNamePublisher = "Эксмо"
                        },
                        new
                        {
                            Id = 2,
                            AddressPublisher = "РБ, г.Минск, ул. Олешева 1, офис 309",
                            FullNamePublisher = "ОДО <<Аверсэв>>",
                            ShortNamePublisher = "Аверсэв"
                        },
                        new
                        {
                            Id = 3,
                            AddressPublisher = "РФ, г.Москва, Волгоградский Просп, д. 3-5",
                            FullNamePublisher = "ООО <<Комильфо>>",
                            ShortNamePublisher = "Комильфо"
                        },
                        new
                        {
                            Id = 4,
                            AddressPublisher = "РФ, г.Москва, б-р Звёздный 21, стр.1",
                            FullNamePublisher = "Творческое кооперативное объединение <<АСТ>>",
                            ShortNamePublisher = "АСТ"
                        },
                        new
                        {
                            Id = 5,
                            AddressPublisher = "РФ, г.Москва, ул. Зубовский бульвар 13 стр.2",
                            FullNamePublisher = "ООО <<Издательсво Синдбад>>",
                            ShortNamePublisher = "Синдбад"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Booksid")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Booksid");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Booksid = 1,
                            TotalPrice = 12,
                            UserId = "393"
                        });
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.TheAuthors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TheAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Лев Николаевич Толстой"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Уильям Шекспир"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Джеймс Джойс"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Владимир Владимирович Набоков"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Фёдор Михайлович Достоевский"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Уильям Фолкнер"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Чарльз Диккенс"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Антон Павлович Чехов"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Гюстав Флобер"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Джейн Остин"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "666",
                            ConcurrencyStamp = "e8fc6dce-bbb8-4d8a-977c-9766e8f2e7c2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "333",
                            ConcurrencyStamp = "a12a1416-c8b0-492f-a925-2bc4245da102",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "102500ae-156c-4963-ac8f-898f54799f2d",
                            Email = "bookshop@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "bookshop@mail.ru",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEOE9DfCi7SoGiUw1OSi7GifPc9dZXIvsUimWWojAZM2q/yV49aWtW81kfEaKVfo1Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "393",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f09dedf5-8ebf-42a8-ba9d-8b7f5432f61d",
                            Email = "user@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "user@mail.ru",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEISk/h7EQ6kS5uOv8ePxGwF8xvloczi8ekcxVsilp6Hyzof/WINKcIFJC0V9QhKLPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "696",
                            RoleId = "666"
                        },
                        new
                        {
                            UserId = "393",
                            RoleId = "333"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Books", b =>
                {
                    b.HasOne("BookShop.WEB.DataBase.Entities.Binding", "Binding")
                        .WithMany()
                        .HasForeignKey("Bindingid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.WEB.DataBase.Entities.Format", "Format")
                        .WithMany()
                        .HasForeignKey("Formatid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.WEB.DataBase.Entities.Ganres", "Ganres")
                        .WithMany()
                        .HasForeignKey("Ganresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.WEB.DataBase.Entities.Importer", "Importer")
                        .WithMany()
                        .HasForeignKey("Importerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.WEB.DataBase.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("Publisherid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.WEB.DataBase.Entities.TheAuthors", "TheAuthors")
                        .WithMany()
                        .HasForeignKey("TheAuthorsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Delivery", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.Pickup", b =>
                {
                    b.HasOne("BookShop.WEB.DataBase.Entities.OurStores", "OurStores")
                        .WithMany()
                        .HasForeignKey("OurStoresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.WEB.DataBase.Entities.ShoppingCart", b =>
                {
                    b.HasOne("BookShop.WEB.DataBase.Entities.Books", "Books")
                        .WithMany()
                        .HasForeignKey("Booksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
